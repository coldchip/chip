class Convert {
	method string(int number) : [static] returns char[] {
		return "sssssssssssss";
	}
}

class Math {
	method min(int a, int b) : [static] returns int {
		if(a < b) {
			return a;
		}
		return b;
	}
	method max(int a, int b) : [static] returns int {
		if(a > b) {
			return a;
		}
		return b;
	}
	method sqrt(int n) : [static] returns int {
		int lo = Math.min(1, n); 
		int hi = Math.max(1, n);

		while(100 * lo * lo < n) {
			lo = lo * 10;
		}
		while(0.01 * hi * hi > n) {
			hi = hi * 0.1;
		}

		int i = 0;
		int mid = 0;
		while(i < 100) {
			mid = (lo + hi)/2;

			if(mid * mid eq n) {
				return mid;
			}
			if(mid * mid > n) {
				hi = mid;
			} else {
				lo = mid;
			}

			i = i + 1;
		}

		return mid;
	}
}

class Console {
	method write(char[] a) : [static] returns void {
		int i = 0;
		while(i < a.count) {
			syscall(2, a[i]) : void;
			i = i + 1;
		}
	}
}

class StringTest {
	char[] data;
	method constructor() returns void {
		this.data = new char[0];
	}
	method append(char[] b) returns void {
		char[] result = new char[this.data.count + b.count];

		int x = 0;
		while(x < this.data.count) {
			result[x] = this.data[x];
			x = x + 1;
		}

		int y = 0;
		while(y < b.count) {
			result[y + this.data.count] = b[y];
			y = y + 1;
		}

		this.data = result;

		return 0;
	}

	method test() returns void {

	}
}

class Client {
	int fd;
	method constructor(int fd) returns void {
		this.fd = fd;
	}

	method read(int size) returns char[] {
		return syscall(63, this.fd, size) : char[];
	}

	method write(char[] data) returns int {
		return syscall(64, this.fd, data) : int;
	}

	method close() returns void {
		syscall(65, this.fd) : void;
	}
}

class Socket {
	char[] ip;
	int port;
	int fd;
	method constructor(char[] ip, int port) returns void {
		this.ip = ip;
		this.port = port;
		this.fd = syscall(60) : int;
	}

	method bind() returns int {
		return syscall(61, this.fd, this.ip, this.port) : int;
	}

	method accept() returns Client {
		int fd = syscall(62, this.fd) : int;
		Client c = new Client();
		c.constructor(fd);
		return c;
	}
}

class Main {
	method main() : [static] returns void {
		Console f = new Console();
		Convert convert = new Convert();

		Socket s = new Socket();
		s.constructor("0.0.0.0", 19132);

		if(s.bind() eq 1) {
			while(1) {
				Client c = s.accept();
				f.write("hello client\n");

				char[] input = c.read(8192);
				f.write(input);


				StringTest j = new StringTest();
				j.constructor();
				int y = 0;
				while(y < 128) {
					j.append("hello");
					y = y + 1;
				}

				StringTest r = new StringTest();
				r.constructor();
				r.append("HTTP/1.0 200 OK\r\n");
				r.append("Content-Length: ");
				r.append("5");
				r.append("\r\n\r\n");
				r.append("hello");

				char[] lol = convert.string(9999);

				syscall(1, lol.count) : void;

				f.write(lol);
				f.write("\n");

				c.write(r.data);

				c.close();
			}
		} else {
			f.write("unable to bind\n");
		}
	}
}