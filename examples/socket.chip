
class String {
	function constructor() {
		
	}

	function length() {
		return syscall("string_length", this);
	}

	function at(i) {
		return syscall("string_at", this, i);
	}

}

class Array {
	function constructor() {

	}
}

class Number {
	function constructor() {

	}
}

class Convert {
	function string(data) : [static] {
		return syscall("convert.string", this, data);
	}

	function number(data) : [static] {
		return syscall("convert.number", this, data);
	}
}

class Console {
	function write(a) : [static] {
		syscall("console.write", a);
	}

	function read(text) : [static] {
		return syscall("console.read", text);
	}
}

class Client {
	function constructor(fd) {
		this.fd = fd;
	}

	function read() {
		return syscall("read", this.fd);
	}

	function write(data) {
		return syscall("write", this.fd, data, data.length());
	}

	function test2(data, l) {
		return 1;
	}

	function test(data) {
		return this.test2(data, data.length());
	}

	function close() {
		syscall("close", this.fd);
	}
}

class Cicular {
	function setNext(next) {
		this.next = next;
	}
}

class Socket {
	function constructor(ip, port) {
		this.ip = ip;
		this.port = port;
		this.socket = syscall("socket");
	}

	function bind() {
		return syscall("bind", this.socket, this.ip, this.port);
	}

	function accept() {
		fd = syscall("accept", this.socket);

		return new Client(fd);
	}
}

class ListNode {
	function constructor(item) {
		this.item = item;
		this.next = "";	
		this.hasNext = 0;	
	}

	function setNext(next) {
		this.next = next;
		this.hasNext = 1;
	}

	function getNext() {
		return this.next;
	}
}

class List {
	function constructor() {
		this.head = new ListNode(0);
		this.current = this.head;
	}

	function push(item) {
		a = new ListNode(item);
		this.current.setNext(a);
		this.current = a;
	}
}

class Math {
	function random() : [static] {
		return syscall("rand");
	}
	function min(a, b) : [static] {
		if(a < b) {
			return a;
		}
		return b;
	}
	function max(a, b) : [static] {
		if(a > b) {
			return a;
		}
		return b;
	}
	function sqrt(n) : [static] {
		lo = Math.min(1, n); 
		hi = Math.max(1, n);

		while(100 * lo * lo < n) {
			lo = lo * 10;
		}
		while(0.01 * hi * hi > n) {
			hi = hi * 0.1;
		}

		i = 0;
		while(i < 100) {
			mid = (lo + hi)/2;

			if(mid * mid $ n) {
				return mid;
			}
			if(mid * mid > n) {
				hi = mid;
			} else {
				lo = mid;
			}

			i = i + 1;
		}

		return mid;
	}
}

class Main {
	function main() {
		port = Convert.number(Console.read("Enter the port number: "));

		s = new Socket("0.0.0.0", port);
		if(s.bind() $ 1) {
			Console.write("server started on 0.0.0.0:" + Convert.string(port) + "\n");

			list = new List();

			i = 0;
			while(i < 10000) {
				list.push(Math.random());
				i = i + 1;
			}

			Console.write("array filled\n");

			while(1) {
				c = s.accept();

				Console.write("new connection\n");

				input = c.read();

				output = "<h1>Simple Web Server created in Chip Language</h1><br>";

				z = 0;
				start = list.head;
				while(start.hasNext > 0) {
					start = start.getNext();
					output = output + Convert.string(z) + ":" + Convert.string(start.item) + ":" + Convert.string(Math.sqrt(start.item)) + "<br>";
					z = z + 1;
				}

				output = output + input;

				c.write("HTTP/1.0 200 OK\r\n");
				c.write("Content-Type: text/html; charset=utf-8\r\n");
				c.write("omg: LOL\r\n");
				c.write("Content-Length: " + Convert.string(output.length()) + "\r\n\r\n");

				Console.write(s);
				Console.write("\n");

				c.write(output);
				c.close();

			}
		} else {
			Console.write("unable to bind to port " + Convert.string(port) + "\n");
		}

		return 0;
	}
}