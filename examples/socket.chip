class Convert {
	method string(int number) : [static] returns char[] {
		if(number eq 0) {
			return "0";
		}

		int[] result = new int[32];

		int i = number;
		int k = 0;

		while(i > 0) {
			result[k] = 48 + (i % 10);
			i = i / 10;
			k = k + 1;
		}

		int[] reverse = new int[k];

		i = k;
		k = 0;
		while(i > 0) {
			reverse[k] = result[i - 1];
			i = i - 1;
			k = k + 1;
		}

		syscall(5, result) : void;

		return reverse;
	}
}

class Math {
	method min(int a, int b) : [static] returns int {
		if(a < b) {
			return a;
		}
		return b;
	}
	method max(int a, int b) : [static] returns int {
		if(a > b) {
			return a;
		}
		return b;
	}
	method sqrt(int n) : [static] returns int {
		int lo = Math.min(1, n); 
		int hi = Math.max(1, n);

		while(100 * lo * lo < n) {
			lo = lo * 10;
		}
		while(0.01 * hi * hi > n) {
			hi = hi * 0.1;
		}

		int i = 0;
		int mid = 0;
		while(i < 100) {
			mid = (lo + hi) / 2;

			if(mid * mid eq n) {
				return mid;
			}
			if(mid * mid > n) {
				hi = mid;
			} else {
				lo = mid;
			}

			i = i + 1;
		}

		return mid;
	}
}

class Console {
	method write(char[] a) : [static] returns void {
		int i = 0;
		while(i < a.count) {
			syscall(2, a[i]) : void;
			i = i + 1;
		}
	}
}

class String {
	char[] data;
	int count;
	method constructor() returns void {
		this.data = new char[0];
		this.count = 0;
	}

	method newCapacity(int minCapacity) returns int {
		return minCapacity * 2;
	}

	method ensureCapacityInternal(int minimumCapacity) returns void {
		int oldCapacity = this.data.count;
        if(minimumCapacity - oldCapacity > 0) {
            char[] newData = new char[this.newCapacity(minimumCapacity)];
            syscall(8000, newData, 0, this.data, 0, this.data.count) : void;
            syscall(5, this.data) : void;
            this.data = newData;
        }
	}

	method append(char[] b) returns void {
		this.ensureCapacityInternal(this.count + b.count);
		syscall(8000, this.data, this.count, b, 0, b.count) : void;

		this.count = this.count + b.count;


		return 0;
	}

	method getBytes() returns char[] {
		char[] finals = new char[this.count];
		syscall(8000, finals, 0, this.data, 0, this.count) : void;
		return finals;
	}

	method length() returns int {
		return this.count;
	}
}

class Art {
	method triangle(int n) : [static] returns String {
		String output = new String();
		output.constructor();

		int c1 = (n - 1) / 2;
		int c2 = 3 * n / 2 - 1;

		int i = 0;
		while(i < n) {
			int j = 0;
			while(j < n) {
				if(i + j eq c1 or i - j eq c1 or j - i eq c1 or i + j eq c2 or i eq c1 or j eq c1) {
					output.append("*");
				} else {
					output.append(" ");
				}
				j = j + 1;
			}
			output.append("\n");
			i = i + 1;
		}

		return output;
	}
}

class Client {
	int fd;
	method constructor(int fd) returns void {
		this.fd = fd;
	}

	method read(int size) returns char[] {
		return syscall(63, this.fd, size) : char[];
	}

	method write(char[] data) returns int {
		return syscall(64, this.fd, data) : int;
	}

	method close() returns void {
		syscall(65, this.fd) : void;
	}
}

class Socket {
	char[] ip;
	int port;
	int fd;
	method constructor(char[] ip, int port) returns void {
		this.ip = ip;
		this.port = port;
		this.fd = syscall(60) : int;
	}

	method bind() returns int {
		return syscall(61, this.fd, this.ip, this.port) : int;
	}

	method accept() returns Client {
		int fd = syscall(62, this.fd) : int;
		Client c = new Client();
		c.constructor(fd);
		return c;
	}
}

class Main {
	method main() : [static] returns void {

		Socket s = new Socket();
		s.constructor("0.0.0.0", 19132);

		if(s.bind() eq 1) {
			while(1) {
				Client c = s.accept();
				Console.write("hello client\n");

				char[] input = c.read(8192);
				Console.write(input);


				String body = new String();
				body.constructor();
				int y = 0;
				while(y < 1024) {
					int sqrt = Math.sqrt(y);
					body.append(Convert.string(sqrt));
					body.append(":");
					body.append(Convert.string(sqrt * sqrt));
					body.append("<pre>");
					body.append(Art.triangle(13).getBytes());
					body.append("</pre>");
					body.append("\n");
					y = y + 1;
				}

				String header = new String();
				header.constructor();
				header.append("HTTP/1.0 200 OK\r\n");
				header.append("Content-Type: text/html\r\n");
				header.append("Content-Length: ");
				header.append(Convert.string(body.length()));
				header.append("\r\n\r\n");

				c.write(header.getBytes());
				c.write(body.getBytes());

				c.close();

				Console.write(Art.triangle(13).getBytes());
			}
		} else {
			Console.write("unable to bind\n");
		}
	}
}