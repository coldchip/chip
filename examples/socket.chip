class Art {
	method triangle(int n) : [static] returns String {
		String output = new String();

		int c1 = (n - 1) / 2;
		int c2 = 3 * n / 2 - 1;

		int i = 0;
		while(i < n) {
			int j = 0;
			while(j < n) {
				if(i + j eq c1 or i - j eq c1 or j - i eq c1 or i + j eq c2 or i eq c1 or j eq c1) {
					output.append("*");
				} else {
					output.append(" ");
				}
				j = j + 1;
			}
			output.append("\n");
			i = i + 1;
		}

		return output;
	}
}

class Convert {
	method string(int i) : [static] returns char[] {
		if(i eq 0) {
			return "0";
		}

		int[] result = new int[32];

		int negative = (i < 0);

		int k = 0;

		if(negative) {
			i = -i;
		}

		while(i > 0) {
			result[k] = 48 + (i % 10);
			i = i / 10;
			k = k + 1;
		}

		if(negative) {
			result[k] = 45;
			k = k + 1;
		}

		int[] reverse = new int[k];

		i = k;
		k = 0;
		while(i > 0) {
			reverse[k] = result[i - 1];
			i = i - 1;
			k = k + 1;
		}

		syscall(5, result) : void;

		return reverse;
	}
}

class Math {
	method min(int a, int b) : [static] returns int {
		if(a < b) {
			return a;
		}
		return b;
	}
	method max(int a, int b) : [static] returns int {
		if(a > b) {
			return a;
		}
		return b;
	}
	method sqrt(int n) : [static] returns int {
		int lo = Math.min(1, n); 
		int hi = Math.max(1, n);

		while(100 * lo * lo < n) {
			lo = lo * 10;
		}
		while(0.01 * hi * hi > n) {
			hi = hi * 0;
		}

		int i = 0;
		int mid = 0;
		while(i < 100) {
			mid = (lo + hi) / 2;

			if(mid * mid eq n) {
				return mid;
			}
			if(mid * mid > n) {
				hi = mid;
			} else {
				lo = mid;
			}

			i = i + 1;
		}

		return mid;
	}
}

class Console {
	method write(char[] a) : [static] returns void {
		int i = 0;
		while(i < a.count) {
			syscall(2, a[i]) : void;
			i = i + 1;
		}
	}

	method write(int num) : [static] returns void {
		char[] a = Convert.string(num);

		this.write(a);
	}

	method write(String str) : [static] returns void {
		char[] a = str.getBytes();

		this.write(a);
	}
}

class List {

}

class String {
	char[] buffer;
	int count;
	method constructor() returns void {
		this.buffer = new char[16];
		this.count = 0;
	}

	method constructor(char[] a) returns void {
		this.constructor();
		this.append(a);
	}

	method expandCapacity(int minimumCapacity) returns int {
		int newCapacity = this.buffer.count * 2 + 2;
        if(newCapacity - minimumCapacity < 0) {
            newCapacity = minimumCapacity;
        }

		char[] newData = new char[newCapacity];
        syscall(8000, newData, 0, this.buffer, 0, this.buffer.count) : void;
        syscall(5, this.buffer) : void;
        this.buffer = newData;
	}

	method ensureCapacityInternal(int minimumCapacity) returns void {
		int oldCapacity = this.buffer.count;
        if(minimumCapacity - oldCapacity > 0) {
            this.expandCapacity(minimumCapacity);
        }
	}

	method append(char[] b) returns void {
		this.ensureCapacityInternal(this.count + b.count);
		syscall(8000, this.buffer, this.count, b, 0, b.count) : void;

		this.count = this.count + b.count;

		return;
	}

	method append(String bb) returns void {
		this.append(bb.getBytes());

		return;
	}

	method getBytes() returns char[] {
		char[] finals = new char[this.count];
		syscall(8000, finals, 0, this.buffer, 0, this.count) : void;
		return finals;
	}

	method length() returns int {
		return this.count;
	}
}

class Client {
	int fd;
	method constructor(int fd) returns void {
		this.fd = fd;
	}

	method read(char[] buffer, int size) returns int {
		return syscall(63, this.fd, buffer, size) : int;
	}

	method write(char[] data) returns int {
		return syscall(64, this.fd, data) : int;
	}

	method write(String str) : [static] returns int {
		char[] a = str.getBytes();
		return this.write(a);
	}

	method close() returns void {
		syscall(65, this.fd) : void;
	}
}

class Socket {
	char[] ip;
	int port;
	int fd;
	method constructor(char[] ip, int port) returns void {
		this.ip = ip;
		this.port = port;
		this.fd = syscall(60) : int;
	}

	method bind() returns int {
		return syscall(61, this.fd, this.ip, this.port) : int;
	}

	method accept() returns Client {
		int fd = syscall(62, this.fd) : int;
		return new Client(fd);
	}
}

class Random {
	method integer() returns int {
		return syscall(33) : int;
	}

	method string(int length) returns String {
		char[] set = "abcdef0123456789";

		char[] result = new char[length];

		int i = 0;
		while(i < length) {
			result[i] = set[Random.integer() % set.count];
			i = i + 1;
		}

		return new String(result);
	}
}

class Header {
	String buffer;
	method constructor() returns void {
		this.buffer = new String();
		this.buffer.append("HTTP/1.0 200 OK\r\n");
	}

	method append(char[] k, char[] v) returns void {
		this.buffer.append(k);
		this.buffer.append(":");
		this.buffer.append(v);
		this.buffer.append("\r\n");
	}

	method toString() returns String {
		this.buffer.append("\r\n");
		return this.buffer;
	}
}

class Main {
	method main() : [static] returns void {
		Socket s = new Socket("0.0.0.0", 19132);
		if(s.bind()) {
			Console.write("http://0.0.0.0:19132\n");

			while(1) {
				Client c = s.accept();
				Console.write("hello client\n");

				char[] input = new char[8192];
				int r = c.read(input, input.count);
				Console.write(Convert.string(r));
				Console.write(input);


				String body = new String("hello world\n");
				int y = 0;

				body.append(Art.triangle(13));
				body.append("\n");

				while(y < 128) {
					int sqrt = Math.sqrt(y);
					body.append(Convert.string(sqrt));
					body.append(":");
					body.append(Convert.string(sqrt * sqrt));
					body.append(":");
					body.append(Random.string(32));
					body.append("\n");
					body.append(Art.triangle(27));
					body.append("\n");
					y = y + 1;
				}

				char[] text = "hey Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";

				body.append(text);
				body.append(text);
				body.append(text);
				body.append(text);

				Header header = new Header();
				header.append("Server", "Chip");
				header.append("Content-Type", "text/plain");
				header.append("Content-Length", Convert.string(body.length()));

				c.write(header.toString());
				c.write(body);

				c.close();

				Console.write(Art.triangle(27));
			}
		} else {
			Console.write("unable to bind\n");
		}

		float zzscd = 0.33333 + 2;
	}
}