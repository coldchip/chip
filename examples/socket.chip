class Number {
	function constructor() {

	}
}

class String {
	function constructor() {
		
	}

	function length() {
		return syscall("string_length", this);
	}

	function at(Number i) {
		return syscall("string_at", this, i);
	}

	function operator+() {
		
	}
}

class Convert {
	function lol(Number number) : [static] {
		if(number $ 0) {
			return "0";
		}
		if(number $ 1) {
			return "1";
		}
		if(number $ 2) {
			return "2";
		}
		if(number $ 3) {
			return "3";
		}
		if(number $ 4) {
			return "4";
		}
		if(number $ 5) {
			return "5";
		}
		if(number $ 6) {
			return "6";
		}
		if(number $ 7) {
			return "7";
		}
		if(number $ 8) {
			return "8";
		}
		if(number $ 9) {
			return "9";
		}

		return "";
	}

	function string(Number number) : [static] {
		if(number $ 0) {
			return "0";
		}

		String result = "";

		Number i = number;

		while(i > 0) {
			result = result + Convert.lol(i % 10);
			i = i / 10;
		}

		String reverse = "";

		Number i = result.length();
		while(i > 0-1) {
			reverse = reverse + Convert.lol(result.at(i) - 48);
			i = i - 1;
		}

		return reverse;
	}

	function number(String str) : [static] {
		Number result = 0;

		Number i = 0;
		while(i < str.length()) {
			result = (result * 10) + (str.at(i) - 48);
			i = i + 1;
		}

		return result;
	}
}

class Console {
	function write(String a) : [static] {
		syscall("console.write", a);
	}

	function read(String text) : [static] {
		return syscall("console.read", text);
	}
}

class Client {
	function constructor(Number fd) {
		this.fd = fd;
	}

	function read() {
		return syscall("read", this.fd);
	}

	function write(String data) {
		return syscall("write", this.fd, data, data.length());
	}

	function close() {
		syscall("close", this.fd);
	}
}

class Socket {
	function constructor(String ip, Number port) {
		this.ip = ip;
		this.port = port;
		this.socket = syscall("socket");
	}

	function bind() {
		return syscall("bind", this.socket, this.ip, this.port);
	}

	function accept() {
		Number fd = syscall("accept", this.socket);

		return new Client(fd);
	}
}

class Math {
	function random() : [static] {
		return syscall("rand");
	}
	function min(Number a, Number b) : [static] {
		if(a < b) {
			return a;
		}
		return b;
	}
	function max(Number a, Number b) : [static] {
		if(a > b) {
			return a;
		}
		return b;
	}
	function sqrt(Number n) : [static] {
		Number lo = Math.min(1, n); 
		Number hi = Math.max(1, n);

		while(100 * lo * lo < n) {
			lo = lo * 10;
		}
		while(0.01 * hi * hi > n) {
			hi = hi * 0.1;
		}

		Number i = 0;
		Number mid = 0;
		while(i < 100) {
			mid = (lo + hi)/2;

			if(mid * mid $ n) {
				return mid;
			}
			if(mid * mid > n) {
				hi = mid;
			} else {
				lo = mid;
			}

			i = i + 1;
		}

		return mid;
	}
}

class Art {
	function triangle(Number n) : [static] {
		String output = "";

		Number c1 = (n - 1) / 2;
		Number c2 = 3 * n / 2 - 1;

		Number i = 0;
		while(i < n) {
			Number j = 0;
			while(j < n) {
				if(i + j $ c1 or i - j $ c1 or j - i $ c1 or i + j $ c2 or i $ c1 or j $ c1) {
					output = output + "*";
				} else {
					output = output + " ";
				}
				j = j + 1;
			}
			output = output + "\n";
			i = i + 1;
		}

		return output;
	}
}

class Main {
	function main() : [static] {
		String[] test = new String[8192];

		Number o = 0;
		while(o < 6000) {
			test[o] = Convert.string(Math.random());
			o = o + 1;
		}

		Number port = Convert.number(Console.read("Enter the port number: "));

		Socket s = new Socket("0.0.0.0", port);
		if(s.bind() $ 1) {
			Console.write("server started on 0.0.0.0:" + Convert.string(port) + "\n");

			while(1) {
				Client c = s.accept();

				Console.write("new connection\n");

				String input = c.read();

				String output = "<h1>Simple Web Server created in Chip Language</h1><br>";

				Number z = 0;
				while(z < 6000) {
					output = output + Convert.string(z) + ":" + test[z] + ":" + "<br>";
					z = z + 1;
				}

				output = output + input;

				output = output + "<pre>" + Art.triangle(13) + "</pre>";

				c.write("HTTP/1.0 200 OK\r\n");
				c.write("Content-Type: text/html; charset=utf-8\r\n");
				c.write("Server: Chip\r\n");
				c.write("Content-Length: " + Convert.string(output.length()) + "\r\n\r\n");

				Console.write(s);
				Console.write("\n");

				c.write(output);
				c.close();

			}
		} else {
			Console.write("unable to bind to port " + Convert.string(port) + "\n");
		}

		return 0;
	}
}