class String {
	function constructor() {
		
	}

	function length() {
		return syscall("string_length", this);
	}
}

class Number {
	function constructor() {

	}
}

class Client {
	function constructor(fd) {
		this.fd = fd;
	}

	function read() {
		return syscall("read", this.fd);
	}

	function write(data) {
		return syscall("write", this.fd, data, data.length());
	}

	function test2(data, l) {
		return 1;
	}

	function test(data) {
		return this.test2(data, data.length());
	}

	function close() {
		syscall("close", this.fd);
	}
}

class Cicular {
	function setNext(next) {
		this.next = next;
	}
}

class Socket {
	function constructor(ip, port) {
		this.ip = ip;
		this.port = port;
		this.socket = syscall("socket");
	}

	function bind() {
		syscall("bind", this.socket, this.ip, this.port);
	}

	function accept() {
		fd = syscall("accept", this.socket);

		return new Client(fd);
	}
}

class ListNode {
	function constructor(item) {
		this.item = item;
		this.next = "";	
		this.hasNext = 0;	
	}

	function setNext(next) {
		this.next = next;
		this.hasNext = 1;
	}

	function getNext() {
		return this.next;
	}
}

class List {
	function constructor() {
		this.head = new ListNode(0);
		this.current = this.head;
	}

	function push(item) {
		a = new ListNode(item);
		this.current.setNext(a);
		this.current = a;
	}
}

class Main {
	function main() {
		s = new Socket("0.0.0.0", 19132);
		s.bind();

		list = new List();

		i = 0;
		while(i < 10000) {
			list.push(syscall("rand"));
			i = i + 1;
		}

		syscall("print", "done\n");

		while(1) {
			c = s.accept();

			syscall("print", "new connection\n");

			input = c.read();

			output = "<h1>Simple Web Server created in Chip</h1><br>";

			z = 0;
			start = list.head;
			while(start.hasNext > 0) {
				start = start.getNext();
				output = output + z + ":" + start.item + "<br>";
				z = z + 1;
			}

			output = output + input;

			c.write("HTTP/1.0 200 OK\r\n");
			c.write("Content-Type: text/html; charset=utf-8\r\n");
			c.write("omg: LOL\r\n");
			c.write("Content-Length: " + output.length() + "\r\n\r\n");

			syscall("print", s);
			syscall("print", "\n");

			c.write(output);
			c.close();
		}

		return 0;
	}
}