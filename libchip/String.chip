class String {
	char[] buffer;
	int count;
	method constructor() : void {
		this.buffer = new char[](16);
		this.count = 0;
	}

	method constructor(String a) : void {
		this.constructor();
		this.append(a.getBytes());
	}

	method constructor(char[] a) : void {
		this.constructor();
		this.append(a);
	}

	method constructor(char[] a, int length) : void {
		this.constructor();
		this.append(a, length);
	}

	method constructor(char[] a, int offset, int length) : void {
		this.constructor();
		this.append(a, offset, length);
	}

	method expandCapacity(int minimumCapacity) : int {
		int newCapacity = this.buffer.count * 2 + 2;
        if(newCapacity - minimumCapacity < 0) {
            newCapacity = minimumCapacity;
        }

		char[] newData = new char[](newCapacity);
        Array.copy(newData, this.buffer, this.buffer.count);
        this.buffer = newData;
	}

	method ensureCapacityInternal(int minimumCapacity) : void {
		int oldCapacity = this.buffer.count;
        if(minimumCapacity - oldCapacity > 0) {
            this.expandCapacity(minimumCapacity);
        }
	}

	method split(char delim) : String[] {
		String[] result = new String[](8192);

		int j = 0;
		int pos = 0;
		for(int i = 0; i < this.buffer.count; i = i + 1) {
			if(this.buffer[i] == delim || i == this.buffer.count - 1) {
				int length = i - pos;
				result[j] = new String(this.buffer, pos, length);
				j = j + 1;
				pos = i + 1;
			}
		}

		return result;
	}

	method append(char[] b) : void {
		this.append(b, b.count);
		return;
	}

	method append(char[] b, int length) : void {
		this.append(b, 0, length);

		return;
	}

	method append(char[] b, int offset, int length) : void {
		this.ensureCapacityInternal(this.count + length);
		Array.copy(this.buffer, this.count, b, offset, length);

		this.count = this.count + length;

		return;
	}

	method append(String bb) : void {
		this.append(bb.getBytes());
		return;
	}

	method getBytes() : char[] {
		char[] finals = new char[](this.count);
		Array.copy(finals, 0, this.buffer, 0, this.count);
		return finals;
	}

	method length() : int {
		return this.count;
	}
}